// AUTHOR: Konstantin Ottnad
//
// DATE: 20131212
//
// Implements fucntion(s) to read binary file with ascii headers, e.g. as generated by threep-block.c

#include "../include/io.hh"

using namespace std;


// general auxiliary functions

// Determines the endianess (little=0, big=1) of the current machine
// STATUS: done

unsigned int get_endianess()
{
  union
  {
    char c[4];
    int i;
  } word32;
   word32.i=1;
   if(word32.c[3]==1) return bigEndian;
   return littleEndian;
}


// swaps the byte order of a block of length block_length of data words of length 4
// STATUS: done
void swap_byte_order_4(char *block, int64_t block_length)
{
  register char *i, *j, *k;
  char buf;
  char *bound = block + (block_length*4);
  for(i=block; i<bound; i+=4)
  {
    j=i;
    k=j+3;
    buf = *j;
    *j = *k; 
    *k = buf;
    j++;
    k--;
    buf = *j;
    *j = *k;
    *k = buf;
  }
  return;
}


// swaps the byte order of a block of length block_length of data words of length 8
// STATUS: done
void swap_byte_order_8(char *block, int64_t block_length)
{
  register char *i,*j,*k;
  char buf;
  char *bound = block + (block_length*8);
  for(i=block; i<bound; i+=8)
  {
    j=i;
    k=j+7;
    buf = *j;
    *j  = *k; 
    *k  = buf;
    j++;
    k--;
    buf = *j;
    *j  = *k;
    *k  = buf;
    j++;
    k--;
    buf = *j;
    *j  = *k;
    *k  = buf;
    j++;
    k--;
    buf = *j;
    *j  = *k;
    *k  = buf;
  }
  return;
}


// Writes a file that can be parsed by a mixed_text_reader object; for description of the format string see class implementation.
// Dimensions of the three input arrays are determined implicitly from 'format'-string and 'no_lines'.
// STATUS: done
int write_mixed_text(const string filename, const string format, const double *data, const int *index, const string *label, const unsigned int no_lines, const unsigned int append)
{
  ofstream ofs;
  unsigned int no_columns_double = 0, no_columns_int = 0,  no_columns_string = 0;
  for (unsigned int i=0; i<format.length(); i++)
  {
    switch (format[i])
    {
      case 'd':
        no_columns_double++;
        break;
      case 'i':
        no_columns_int++;
        break;
      case 's':
        no_columns_string++;
        break;
      default: // check for incompatible format string
        cout << endl << "FAIL: Illegal format specifier '" << format << "' for output file '" << filename << "'." << endl;
        ofs.close();
        return -1;
    }
  }
  if (append)
  {
    ofs.open(filename.c_str(), ofstream::out|ofstream::app);
  }
  else
  {
    ofs.open(filename.c_str(), ofstream::out);
  }
  if (ofs.is_open())
  {
    for (unsigned int i=0; i<no_lines; i++)
    {
      unsigned int index_double=0, index_int=0, index_string=0;
      for (unsigned int j=0; j<format.length(); j++)
      {
        switch (format[j])
        {
          case 'd':
            ofs << scientific << data[i * no_columns_double + index_double];
            index_double++;
            break;
          case 'i':
            ofs << index[i * no_columns_int + index_int];
            index_int++;
            break;
          case 's':
            ofs << label[i * no_columns_string + index_string];
            index_string++;
            break;
        }
        if (j<(format.length()-1))
        {
          ofs << " ";
        }
        else
        {
          ofs << endl;
        }
      }
    }
    ofs.close();
  }
  else
  {
    cout << endl << "FAIL: Error opening output file '" << filename << "'." << endl;
    return -1;
  }
  return 0;
}


// constructor for class binary_reader
// STATUS: done
binary_reader::binary_reader(string fname, string shead, string ehead)
{
  filename = fname;
  start_header = shead;
  end_header = ehead;
  header = NULL;
  data = NULL;
  error = 0;
  header_lines = 0;
  header_bytes=get_header_size();
  return;
}


// destructor for class binary_reader
// STATUS: done
binary_reader::~binary_reader()
{
  if (header!=NULL) delete [] header;
  if (data!=NULL) delete [] data;
  return;
}


// returns the error code of the last file operation
// STATUS: done
string binary_reader::get_error()
{
  stringstream s;
  s.str("");
  switch (error)
  {
    case 0:
      s << "No error";
    break;
    case 1:
      s << "FAIL: Error opening file '" << filename << "'"; 
    break;
    case 2:
      s << "FAIL: No valid header string found in first line of file '" << filename << "'";
    break;
    case 3:
      s << "FAIL: Tried to read header but expected zero lines in file '" << filename << "'. Nothing has been read.";
    break;
    case 4:
      s << "FAIL: No binary data found in file '" << filename << "'";
    break;
    default:
      s << "FAIL: Unknown error";
  }
  return s.str();
}


// return the size of a header in _bytes_ (required to set the file pointer for reading the binary data)) and sets the internal header_bytes 
// and header_lines variables (useful for reading the header from the file as text)
// STATUS: done
int binary_reader::get_header_size()
{
  string s;
  header_bytes = 0; // reset the internal counters
  header_lines = 0;
  if (start_header=="") return header_bytes; // check if we expect any header at all
  stream.open(filename.c_str());
  if (stream.is_open())
  {
    while (!(stream.eof()))
    {
      getline(stream, s);
      if ((header_lines==0)&&(s.find(start_header)==string::npos)) // check if this is actually a valid header, i.e. the correct string is found at its beginning, which is assumed to be the first line in the file!
      {
        error = 2;
        break;
      }
      header_lines++;
      if ((s.find(end_header))!=string::npos) // stop if end of header is found. We assume that the header ALWAYS ends with an "\n" in addition to the terminating string!
      {
        header_bytes = stream.tellg();
        break;
      }
    }
    stream.close();
  }
  else
  {
    error = 1;
  }
  return header_bytes;
}


// read a header from a file and returns a pointer to a string list which can be parsed and the number of lines read
// assumes that header_lines has been determined previously (usually done by the constructor)
// STATUS: done
int binary_reader::read_header()
{
  int lines = 0;
  header = NULL;
  if (header_lines==0) // if zero lines are expected, we do not need to read anything (allows for files without any header)
  {
    error = 3;
    return 0;
  }
  stream.open(filename.c_str());
  if (stream.is_open())
  {
    header = new string [header_lines]; // allocated memory for the strings of the header that we are going to read
    while ((lines<header_lines)&&(!stream.eof()))
    {
      getline(stream, header[lines]);
      lines++;
    }
    stream.close();
  }
  else
  {
    error = 1;
  }
  return lines;
}


// returns the total number of bytes read and a pointer to the data
// assumes that header_bytes has been determined previously (usually done by the constructor)
// STATUS: done
int64_t binary_reader::read_data()
{
  int64_t length = 0;
  data  = NULL;
  stream.open(filename.c_str(), ios::binary); // open in binary mode
  if (stream.is_open())
  {
    stream.seekg(0, stream.end);
    length = stream.tellg();
    length -= header_bytes;
    if (length>0)
    {
      data = new char [length];
      stream.seekg(header_bytes, stream.beg); // move fp to the end of the header (actually to the next byte we want to read)
      stream.read(data, length);
    }
    else // stop if no binary data is present
    {
      error = 4;
    }
    stream.close();
  }
  else
  {
    error = 1;
  }
  return length;
}


// returns the current filename
// STATUS: done
string binary_reader::get_filename()
{
  return filename;
}


// search for first occurrence of a string in the header, return the remainder of the line and delete it from 'header'
// STATUS: done
string binary_reader::parse_header(string tag)
{
  string s = "";
  for (int i=0; i<header_lines; i++)
  {
    if (header[i].find(tag)!=string::npos) // check for occurrence of 'tag' in the 'header' list
    {
      s = header[i];
      s.erase(s.find(tag), tag.length());  // delete the 'tag' substring
      header[i] = "";                      // delete the line from the header
      break;
    }
  }
  return s;
}


// prints the header to a stream, avoiding empty lines 
// STATUS: done
void binary_reader::print_header(ostream *stream)
{
  for (int i=0; i<header_lines; i++)
  {
    if (header[i]!="") (* stream) << header[i] << endl;
  }
  return;
}



// constructor for base class text_reader
// STATUS: done
text_reader::text_reader(string fname, unsigned int sskip, unsigned int eskip)
{
  columns = 0;
  error = 0;
  lines = 0;
  start_skip = sskip;
  end_skip = eskip;
  filename = fname;
  stream.open(filename.c_str());
  if (!(stream.is_open()))
  {
    error = 1;
  }
  else
  {
    string s;
    while (getline(stream, s))
    {
      lines++;
    }
    stream.clear();
    stream.seekg(0, ios::beg); // reset the input stream
    lines -= start_skip + end_skip; // set the actual number of lines we want to read
    if (lines>0) // only determine number of columns if we do not skip the entire file
    {
      for (unsigned int i=0; i<=start_skip; i++)
      {
        getline(stream,s);
      }
      while (s!="") // count the columns
      {
        while ((s!="")&&(s[0]==' '))
        {
          s.erase(0,1);
        }
        if (s[0]!=' ')
        {
          columns++; // only increment the counter if another column was found.. and NOT if the last column was only ended by some additional whitespace
          while ((s!="")&&(s[0]!=' '))
          {
            s.erase(0,1);
          }
        }
      }
      stream.clear();
      stream.seekg(0, ios::beg); // reset the input stream
    }
  }
  return;
}


// Returns the number of lines (the number we actually want to read; can be smaller than the number in the file)
// STATUS: done
unsigned int text_reader::get_lines()
{
  return lines;
}


// Returns the number of columns
// STATUS: done
unsigned int text_reader::get_columns()
{
  return columns;
}


// destructor for base class text_reader
// STATUS: done
text_reader::~text_reader()
{
  if (stream.is_open())
  {
    stream.close();
  }
  return;
}


// Returns the error string of the last text file operation. Contains error codes for all text_reader based classes
// STATUS: done
string text_reader::get_error()
{
  stringstream s;
  s.str("");
  switch (error)
  {
    case 0:
      s << "No error";
      break;
    case 1:
      s << "FAIL: Error opening file '" << filename << "'";
      break;
    case 2:
      s << "FAIL: Error parsing file '" << filename << "'";
      break;
    case 3:
      s << "FAIL: Found undefined type identifier in format string."; // this should NEVER occur; if this error is thrown something is wrong with the code itself
      break;
    case 4:
      s << "FAIL: Number of columns in file '" << filename << "' does not match file format specification.";
      break;
    case 5:
      s << "FAIL: Empty file '" << filename << "'";
      break;
    case 6:
      s << "FAIL: Column index for get_index_max_value() out of range!";
      break;
    case 7:
      s << "FAIL: Column index for get_index_min_value() out of range!";
      break;
    case 8:
      s << "FAIL: Column index for find_index() out of range!";
      break; 
    default:
      s << "FAIL: Unknown error";
      break;
  }
  return s.str();
}


// Returns the error id of the last text file operation. Provides more efficient error checking than testing corresponding error strings
// STATUS: done
unsigned int text_reader::get_error_id()
{
  return error;
}


// Constructor for class 'numeric_text_reader'
// STATUS: done
numeric_text_reader::numeric_text_reader(string fname) : text_reader(fname, 0, 0)
{
  if (error==0) // error might have occured before ...
  {
    if (stream.is_open()) // base class constructor returns open file in standard stream, but here we need classical FILE * pointer for GSL...
    {
      stream.close();
    }
    data = gsl_matrix_alloc(columns, lines);
    file = fopen(filename.c_str(), "r");
    if (gsl_matrix_fscanf(file, data)!=0)
    {
      error = 2;
      data = NULL;
    }
    fclose(file);
  }
  return;
}


// Destructor for class 'numeric_text_reader'
// STATUS: done
numeric_text_reader::~numeric_text_reader()
{
  if (data!=NULL) gsl_matrix_free(data);
  return;
}


// Constructor for class mixed_text_reader
// STATUS: done
mixed_text_reader::mixed_text_reader(string fname, unsigned int sskip, unsigned int eskip, string format) : text_reader(fname, sskip, eskip)
{
  string s;
  no_int = count(format.begin(), format.end(), 'i');
  no_double  = count(format.begin(), format.end(), 'd');
  no_string = count(format.begin(), format.end(), 's');
  data  = NULL;
  index = NULL;
  label = NULL;
  if (error==0) //proceed only if there was no error in the base class constructor
  {
    if ((no_int + no_double + no_string)!=format.length()) // perform sanity checks on file, format string
    {
      error = 3;
      return;
    }
    if ((no_int + no_double + no_string)!=columns)
    {
      error = 4;
      return;
    }
    if (lines>0)
    {
      if (no_int)
      {
        index = new int [no_int * lines];
      }
      if (no_double)
      {
        data = new double [no_double * lines];
      }
      if (no_string)
      {
        label = new string [no_string * lines];
      }
    }
    else
    {
      error = 5;
      return;
    }
    for (unsigned int i=0; i<start_skip; i++)
    {
      getline(stream, s); // move to the first line we want to read
    }
    for (unsigned int i=0; i<lines; i++) // read and parse the file content, NO FURTHER checks are performed
    {
      unsigned int j_double = 0, j_int = 0, j_string = 0;
      for (unsigned int j=0; j<columns; j++)
      {
        if (format.at(j)=='d')
        {
          stream >> data[i * no_double + j_double];
          j_double++;
        }
        if (format.at(j)=='i')
        {
          stream >> index[i * no_int + j_int];
          j_int++;
        }
        if (format.at(j)=='s')
        {
          stream >> label[i * no_string + j_string];
          j_string++;
        }
      }
    }
  stream.close(); // finally close the file -- This is important if many instances are used at the same time, becaus of the limit on file handles
  }
  return;
}


// Finds 'value' in 'index' starting at 'skip', Returns -1 if not found
// STATUS: check
int mixed_text_reader::find_index(unsigned int column, int skip, const int value)
{
  int pos = -1;
  if (skip<0) return -1;
  const int no_lines = get_lines();
  if (column<no_int)
  {
    while (skip<no_lines)
    {
      if (index[skip * no_int + column]==value)
      {
        pos=skip;
        break;
      }
      skip++;
    }
  }
  else
  {
    error=8;
  }
  return pos;
}


// Finds an index vector ('values') in 'index' starting at 'skip', Returns -1 if not found
// STATUS: check
int mixed_text_reader::find_index_vector(int skip, const int values[])
{
  int pos = -1;
  const int no_lines = get_lines();
  while ((skip>=0)&&(skip<no_lines))
  {
    skip = find_index(0, skip, values[0]);
    if (skip>=0)
    {
      for (unsigned int column=1; column<no_int; column++)
      {
        if (index[skip * no_int + column]!=values[column]) break; // break if index does not match
        if (column==no_int-1) pos = skip; // found index vector, after comparing all elements
      }
      if (pos>=0) break; // return if index was found
    }
    skip++; // mind the off-by-one for the skip
  }
  return pos;
}


// Returns the max value for a given index 'column' in the 'index' array. Required stride is determined from format string by constructor
// STATUS: done
int mixed_text_reader::get_index_max_value(unsigned int column)
{
  int max=0;
  if (column<no_int)
  {
    for (unsigned int i=0; i<get_lines(); i++)
    {
      max = (max<index[i * no_int + column] ? index[i * no_int + column] : max);
    }
  }
  else
  {
    error = 6;
  }
  return max;
}


// Returns the min value for a given index 'column' in the 'index' array. Required stride is determined from format string by constructor
// STATUS: done
int mixed_text_reader::get_index_min_value(unsigned int column)
{
  int min=0;
  if (column<no_int)
  {
    for (unsigned int i=0; i<get_lines(); i++)      
    {            
      min = (min>index[i * no_int + column] ? index[i * no_int + column] : min);
    }
  }
  else
  {
    error = 7;
  }
  return min;
}


// Returns the number of data (double) columns
// STATUS: done
unsigned int mixed_text_reader::get_no_double()
{
  return no_double;
}


// Returns the number of index (int) columns
// STATUS: done
unsigned int mixed_text_reader::get_no_int()
{
  return no_int;
}


// Returns the number of label (string)
// STATUS: done
unsigned int mixed_text_reader::get_no_string()
{
  return no_string;
}


// Destructor for class mixed_text_reader
// STATUS: done
mixed_text_reader::~mixed_text_reader()
{
  delete [] index;
  delete [] data;
  delete [] label;
  return;
}
